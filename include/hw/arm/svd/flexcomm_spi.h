/*
 * Copyright 2016-2023 NXP SPDX-License-Identifier: BSD-3-Clause
 *
 * Automatically generated by svd-gen-header.py from MIMXRT595S_cm33.xml
 */
#pragma once

#include "hw/register.h"

/* Serial Peripheral Interfaces (SPI) */
#define FLEXCOMM_SPI_REGS_NO (1024)

/* Configuration Register */
REG32(FLEXCOMM_SPI_CFG, 0x400);
/* SPI Enable */
FIELD(FLEXCOMM_SPI_CFG, ENABLE, 0, 1);
/* Master Mode Select */
FIELD(FLEXCOMM_SPI_CFG, MASTER, 2, 1);
/* LSB First Mode Enable */
FIELD(FLEXCOMM_SPI_CFG, LSBF, 3, 1);
/* Clock Phase Select */
FIELD(FLEXCOMM_SPI_CFG, CPHA, 4, 1);
/* Clock Polarity Select */
FIELD(FLEXCOMM_SPI_CFG, CPOL, 5, 1);
/* Loopback Mode Enable */
FIELD(FLEXCOMM_SPI_CFG, LOOP, 7, 1);
/* SSEL0 Polarity Select */
FIELD(FLEXCOMM_SPI_CFG, SPOL0, 8, 1);
/* SSEL1 Polarity Select */
FIELD(FLEXCOMM_SPI_CFG, SPOL1, 9, 1);
/* SSEL2 Polarity Select */
FIELD(FLEXCOMM_SPI_CFG, SPOL2, 10, 1);
/* SSEL3 Polarity Select */
FIELD(FLEXCOMM_SPI_CFG, SPOL3, 11, 1);

/* Status Register */
REG32(FLEXCOMM_SPI_STAT, 0x408);
/* Slave Select Assert */
FIELD(FLEXCOMM_SPI_STAT, SSA, 4, 1);
/* Slave Select Deassert */
FIELD(FLEXCOMM_SPI_STAT, SSD, 5, 1);
/* Stalled Status Flag */
FIELD(FLEXCOMM_SPI_STAT, STALLED, 6, 1);
/* End Transfer Control */
FIELD(FLEXCOMM_SPI_STAT, ENDTRANSFER, 7, 1);
/* Master Idle Status Flag */
FIELD(FLEXCOMM_SPI_STAT, MSTIDLE, 8, 1);

/* Interrupt Enable Register */
REG32(FLEXCOMM_SPI_INTENSET, 0x40C);

/* Interrupt Enable Clear Register */
REG32(FLEXCOMM_SPI_INTENCLR, 0x410);

/* Interrupt Status Register */
REG32(FLEXCOMM_SPI_INTSTAT, 0x428);

/* FIFO Configuration Register */
REG32(FLEXCOMM_SPI_FIFOCFG, 0xE00);
/* Enable the Transmit FIFO */
FIELD(FLEXCOMM_SPI_FIFOCFG, ENABLETX, 0, 1);
/* Enable the Receive FIFO */
FIELD(FLEXCOMM_SPI_FIFOCFG, ENABLERX, 1, 1);
/* Empty Command for the Transmit FIFO */
FIELD(FLEXCOMM_SPI_FIFOCFG, EMPTYTX, 16, 1);
/* Empty Command for the Receive FIFO */
FIELD(FLEXCOMM_SPI_FIFOCFG, EMPTYRX, 17, 1);

/* FIFO Status Register */
REG32(FLEXCOMM_SPI_FIFOSTAT, 0xE04);
/* TX FIFO Error */
FIELD(FLEXCOMM_SPI_FIFOSTAT, TXERR, 0, 1);
/* RX FIFO Error */
FIELD(FLEXCOMM_SPI_FIFOSTAT, RXERR, 1, 1);
/* Peripheral Interrupt */
FIELD(FLEXCOMM_SPI_FIFOSTAT, PERINT, 3, 1);
/* Transmit FIFO Empty */
FIELD(FLEXCOMM_SPI_FIFOSTAT, TXEMPTY, 4, 1);
/* Transmit FIFO is Not Full */
FIELD(FLEXCOMM_SPI_FIFOSTAT, TXNOTFULL, 5, 1);
/* Receive FIFO is Not Empty */
FIELD(FLEXCOMM_SPI_FIFOSTAT, RXNOTEMPTY, 6, 1);
/* Receive FIFO is Full */
FIELD(FLEXCOMM_SPI_FIFOSTAT, RXFULL, 7, 1);
/* Transmit FIFO Current Level */
FIELD(FLEXCOMM_SPI_FIFOSTAT, TXLVL, 8, 5);
/* Receive FIFO Current Level */
FIELD(FLEXCOMM_SPI_FIFOSTAT, RXLVL, 16, 5);

/* FIFO Trigger Register */
REG32(FLEXCOMM_SPI_FIFOTRIG, 0xE08);
/* Transmit FIFO Level Trigger Enable */
FIELD(FLEXCOMM_SPI_FIFOTRIG, TXLVLENA, 0, 1);
/* Receive FIFO Level Trigger Enable */
FIELD(FLEXCOMM_SPI_FIFOTRIG, RXLVLENA, 1, 1);
/* Transmit FIFO Level Trigger Point */
FIELD(FLEXCOMM_SPI_FIFOTRIG, TXLVL, 8, 4);
/* Trigger when the TX FIFO becomes empty */
#define FLEXCOMM_SPI_FIFOTRIG_TXLVL_TXLVL0 0
/* Trigger when the TX FIFO level decreases to 1 entry */
#define FLEXCOMM_SPI_FIFOTRIG_TXLVL_TXLVL1 1
/* Trigger when the TX FIFO level decreases to 15 entries (is no longer full) */
#define FLEXCOMM_SPI_FIFOTRIG_TXLVL_TXLVL15 15
/* Receive FIFO Level Trigger Point */
FIELD(FLEXCOMM_SPI_FIFOTRIG, RXLVL, 16, 4);
/* Trigger when the RX FIFO has received 1 entry (is no longer empty) */
#define FLEXCOMM_SPI_FIFOTRIG_RXLVL_RXLVL1 0
/* Trigger when the RX FIFO has received 2 entries */
#define FLEXCOMM_SPI_FIFOTRIG_RXLVL_RXLVL2 1
/* Trigger when the RX FIFO has received 16 entries (has become full) */
#define FLEXCOMM_SPI_FIFOTRIG_RXLVL_RXLVL15 15

/* FIFO Interrupt Enable Register */
REG32(FLEXCOMM_SPI_FIFOINTENSET, 0xE10);
/* TX Error Interrupt Enable */
FIELD(FLEXCOMM_SPI_FIFOINTENSET, TXERR, 0, 1);
/* Receive Error Interrupt Enable */
FIELD(FLEXCOMM_SPI_FIFOINTENSET, RXERR, 1, 1);
/* Transmit FIFO Level Interrupt Enable */
FIELD(FLEXCOMM_SPI_FIFOINTENSET, TXLVL, 2, 1);
/* Receive FIFO Level Interrupt Enable */
FIELD(FLEXCOMM_SPI_FIFOINTENSET, RXLVL, 3, 1);

/* FIFO Interrupt Enable Clear Register */
REG32(FLEXCOMM_SPI_FIFOINTENCLR, 0xE14);
/* TX Error Interrupt Enable */
FIELD(FLEXCOMM_SPI_FIFOINTENCLR, TXERR, 0, 1);
/* Receive Error Interrupt Enable */
FIELD(FLEXCOMM_SPI_FIFOINTENCLR, RXERR, 1, 1);
/* Transmit FIFO Level Interrupt Enable */
FIELD(FLEXCOMM_SPI_FIFOINTENCLR, TXLVL, 2, 1);
/* Receive FIFO Level Interrupt Enable */
FIELD(FLEXCOMM_SPI_FIFOINTENCLR, RXLVL, 3, 1);

/* FIFO Interrupt Status Register */
REG32(FLEXCOMM_SPI_FIFOINTSTAT, 0xE18);
/* TX FIFO Error Interrupt Status */
FIELD(FLEXCOMM_SPI_FIFOINTSTAT, TXERR, 0, 1);
/* RX FIFO Error Interrupt Status */
FIELD(FLEXCOMM_SPI_FIFOINTSTAT, RXERR, 1, 1);
/* Transmit FIFO Level Interrupt Status */
FIELD(FLEXCOMM_SPI_FIFOINTSTAT, TXLVL, 2, 1);
/* Receive FIFO Level Interrupt Status */
FIELD(FLEXCOMM_SPI_FIFOINTSTAT, RXLVL, 3, 1);
/* Peripheral Interrupt Status */
FIELD(FLEXCOMM_SPI_FIFOINTSTAT, PERINT, 4, 1);

/* FIFO Write Data Register */
REG32(FLEXCOMM_SPI_FIFOWR, 0xE20);
/* Transmit Data to the FIFO */
FIELD(FLEXCOMM_SPI_FIFOWR, TXDATA, 0, 16);
/* Transmit Slave Select 0 */
FIELD(FLEXCOMM_SPI_FIFOWR, TXSSEL0_N, 16, 1);
/* Transmit Slave Select 1 */
FIELD(FLEXCOMM_SPI_FIFOWR, TXSSEL1_N, 17, 1);
/* Transmit Slave Select 2 */
FIELD(FLEXCOMM_SPI_FIFOWR, TXSSEL2_N, 18, 1);
/* Transmit Slave Select 3 */
FIELD(FLEXCOMM_SPI_FIFOWR, TXSSEL3_N, 19, 1);
/* End of Transfer */
FIELD(FLEXCOMM_SPI_FIFOWR, EOT, 20, 1);
/* End of Frame */
FIELD(FLEXCOMM_SPI_FIFOWR, EOF, 21, 1);
/* Receive Ignore */
FIELD(FLEXCOMM_SPI_FIFOWR, RXIGNORE, 22, 1);
/* Transmit Ignore */
FIELD(FLEXCOMM_SPI_FIFOWR, TXIGNORE, 23, 1);
/* Data Length */
FIELD(FLEXCOMM_SPI_FIFOWR, LEN, 24, 4);
/* Data transfer is 4 bits in length */
#define FLEXCOMM_SPI_FIFOWR_LEN_LEN_4BITS 3
/* Data transfer is 5 bits in length */
#define FLEXCOMM_SPI_FIFOWR_LEN_LEN_5BITS 4
/* Data transfer is 16 bits in length */
#define FLEXCOMM_SPI_FIFOWR_LEN_LEN_16BITS 15

/* FIFO Read Data Register */
REG32(FLEXCOMM_SPI_FIFORD, 0xE30);
/* Received Data from the FIFO */
FIELD(FLEXCOMM_SPI_FIFORD, RXDATA, 0, 16);
/* Slave Select 0 for Receive */
FIELD(FLEXCOMM_SPI_FIFORD, RXSSEL0_N, 16, 1);
/* Slave Select 1 for Receive */
FIELD(FLEXCOMM_SPI_FIFORD, RXSSEL1_N, 17, 1);
/* Slave Select 2 for Receive */
FIELD(FLEXCOMM_SPI_FIFORD, RXSSEL2_N, 18, 1);
/* Slave Select 3 for Receive */
FIELD(FLEXCOMM_SPI_FIFORD, RXSSEL3_N, 19, 1);
/* Start of Transfer Flag */
FIELD(FLEXCOMM_SPI_FIFORD, SOT, 20, 1);

/* FIFO Data Read with no FIFO Pop Register */
REG32(FLEXCOMM_SPI_FIFORDNOPOP, 0xE40);
/* Received Data from the FIFO */
FIELD(FLEXCOMM_SPI_FIFORDNOPOP, RXDATA, 0, 16);
/* Slave Select 0 for Receive */
FIELD(FLEXCOMM_SPI_FIFORDNOPOP, RXSSEL0_N, 16, 1);
/* Slave Select 1 for Receive */
FIELD(FLEXCOMM_SPI_FIFORDNOPOP, RXSSEL1_N, 17, 1);
/* Slave Select 2 for Receive */
FIELD(FLEXCOMM_SPI_FIFORDNOPOP, RXSSEL2_N, 18, 1);
/* Slave Select 3 for Receive */
FIELD(FLEXCOMM_SPI_FIFORDNOPOP, RXSSEL3_N, 19, 1);
/* Start of Transfer Flag */
FIELD(FLEXCOMM_SPI_FIFORDNOPOP, SOT, 20, 1);

/* FIFO Size Register */
REG32(FLEXCOMM_SPI_FIFOSIZE, 0xE48);
/* FIFO Size */
FIELD(FLEXCOMM_SPI_FIFOSIZE, FIFOSIZE, 0, 5);


#define FLEXCOMM_SPI_REGISTER_ACCESS_INFO_ARRAY(_name) \
    struct RegisterAccessInfo _name[FLEXCOMM_SPI_REGS_NO] = { \
        [0 ... FLEXCOMM_SPI_REGS_NO - 1] = { \
            .name = "", \
            .addr = -1, \
        }, \
        [0x100] = { \
            .name = "CFG", \
            .addr = 0x400, \
            .ro = 0xFFFFF042, \
            .reset = 0x0, \
        }, \
        [0x101] = { \
            .name = "DLY", \
            .addr = 0x404, \
            .ro = 0xFFFF0000, \
            .reset = 0x0, \
        }, \
        [0x102] = { \
            .name = "STAT", \
            .addr = 0x408, \
            .ro = 0xFFFFFF4F, \
            .reset = 0x100, \
        }, \
        [0x103] = { \
            .name = "INTENSET", \
            .addr = 0x40C, \
            .ro = 0xFFFFFECF, \
            .reset = 0x0, \
        }, \
        [0x104] = { \
            .name = "INTENCLR", \
            .addr = 0x410, \
            .ro = 0xFFFFFECF, \
            .reset = 0x0, \
        }, \
        [0x109] = { \
            .name = "DIV", \
            .addr = 0x424, \
            .ro = 0xFFFF0000, \
            .reset = 0x0, \
        }, \
        [0x10A] = { \
            .name = "INTSTAT", \
            .addr = 0x428, \
            .ro = 0xFFFFFFFF, \
            .reset = 0x0, \
        }, \
        [0x380] = { \
            .name = "FIFOCFG", \
            .addr = 0xE00, \
            .ro = 0xFFF80FFC, \
            .reset = 0x0, \
        }, \
        [0x381] = { \
            .name = "FIFOSTAT", \
            .addr = 0xE04, \
            .ro = 0xFFFFFFFC, \
            .reset = 0x30, \
        }, \
        [0x382] = { \
            .name = "FIFOTRIG", \
            .addr = 0xE08, \
            .ro = 0xFFF0F0FC, \
            .reset = 0x0, \
        }, \
        [0x384] = { \
            .name = "FIFOINTENSET", \
            .addr = 0xE10, \
            .ro = 0xFFFFFFF0, \
            .reset = 0x0, \
        }, \
        [0x385] = { \
            .name = "FIFOINTENCLR", \
            .addr = 0xE14, \
            .ro = 0xFFFFFFF0, \
            .reset = 0x0, \
        }, \
        [0x386] = { \
            .name = "FIFOINTSTAT", \
            .addr = 0xE18, \
            .ro = 0xFFFFFFFF, \
            .reset = 0x0, \
        }, \
        [0x388] = { \
            .name = "FIFOWR", \
            .addr = 0xE20, \
            .ro = 0xF0000000, \
            .reset = 0x0, \
        }, \
        [0x38C] = { \
            .name = "FIFORD", \
            .addr = 0xE30, \
            .ro = 0xFFFFFFFF, \
            .reset = 0x0, \
        }, \
        [0x390] = { \
            .name = "FIFORDNOPOP", \
            .addr = 0xE40, \
            .ro = 0xFFFFFFFF, \
            .reset = 0x0, \
        }, \
        [0x392] = { \
            .name = "FIFOSIZE", \
            .addr = 0xE48, \
            .ro = 0xFFFFFFFF, \
            .reset = 0x0, \
        }, \
        [0x3FF] = { \
            .name = "ID", \
            .addr = 0xFFC, \
            .ro = 0xFFFFFFFF, \
            .reset = 0xE0201200, \
        }, \
    }
