#!/usr/bin/env python3

"""
Generate build information header, build-info.h,
for output of -build-info* command line arguments.

SPDX-FileContributor: Manos Pitsidianakis <manos.pitsidianakis@linaro.org>
SPDX-FileCopyrightText: 2024 Linaro Ltd.
SPDX-License-Identifier: GPL-2.0-or-later
"""

# Formatted with black --line-length 80 scripts/build-info-gen.py

import argparse
import logging


def generate_key_val(header: str) -> str:
    # pylint: disable=missing-function-docstring

    with open(header, encoding="utf-8") as cfg:
        config = [l.split()[1:] for l in cfg if l.startswith("#define")]

    for cfg in config:
        if cfg[0].startswith("HAVE_"):
            yield (cfg[0].removeprefix("HAVE_").lower(), None)
            continue
        yield (
            cfg[0].removeprefix("CONFIG_").lower(),
            (
                cfg[1]
                if len(cfg) == 2
                else "".join(cfg[1:]).replace('"', "") if len(cfg) > 2 else None
            ),
        )


def main() -> None:
    # pylint: disable=missing-function-docstring
    parser = argparse.ArgumentParser()
    parser.add_argument("-v", "--verbose", action="store_true")
    parser.add_argument(
        "--config-headers",
        metavar="CONFIG_HEADER",
        action="append",
        dest="config_headers",
        help="paths to configuration host C headers (*.h files)",
        required=False,
        default=[],
    )
    args = parser.parse_args()
    if args.verbose:
        logging.basicConfig(level=logging.ERROR)
    logging.debug("args: %s", args)
    print(
        """// @generated by scripts/build-info-gen.py

#include <stddef.h>"""
    )
    print(
        """static struct build_info_t {
    const char *key;
    const char *value;
} BUILD_INFO[] = {"""
    )
    total = 0
    header_width = 0
    for header in args.config_headers:
        for key, val in generate_key_val(header):
            total += 1
            header_width = max(header_width, len(key))
            print(
                '{"',
                key,
                '", "',
                val.strip('"').strip(",").strip('"') if val else "",
                '"},',
                sep="",
            )
    print("};")
    print("\nstatic size_t BUILD_INFO_SIZE = ", total, ";", sep="")
    print(
        "static unsigned int BUILD_INFO_HEADER_WIDTH = ",
        header_width,
        ";",
        sep="",
    )


if __name__ == "__main__":
    main()
